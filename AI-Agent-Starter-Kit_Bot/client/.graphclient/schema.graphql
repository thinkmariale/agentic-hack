schema {
  query: Query
  subscription: Subscription
}

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Aggregation_interval {
  hour
  day
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  reputationType(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ReputationType
  reputationTypes(
    skip: Int = 0
    first: Int = 100
    orderBy: ReputationType_orderBy
    orderDirection: OrderDirection
    where: ReputationType_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ReputationType!]!
  reportedPostType(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ReportedPostType
  reportedPostTypes(
    skip: Int = 0
    first: Int = 100
    orderBy: ReportedPostType_orderBy
    orderDirection: OrderDirection
    where: ReportedPostType_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ReportedPostType!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type ReportedPostType {
  id: ID!
  recordId: BigInt!
  userId: Bytes
  postText: String
  postUrl: String
  timestamp: BigInt
  derivedContext: String
  derivedContextExplanation: String
  severityScore: BigInt!
  createdAt: BigInt!
}

input ReportedPostType_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  recordId: BigInt
  recordId_not: BigInt
  recordId_gt: BigInt
  recordId_lt: BigInt
  recordId_gte: BigInt
  recordId_lte: BigInt
  recordId_in: [BigInt!]
  recordId_not_in: [BigInt!]
  userId: Bytes
  userId_not: Bytes
  userId_gt: Bytes
  userId_lt: Bytes
  userId_gte: Bytes
  userId_lte: Bytes
  userId_in: [Bytes!]
  userId_not_in: [Bytes!]
  userId_contains: Bytes
  userId_not_contains: Bytes
  postText: String
  postText_not: String
  postText_gt: String
  postText_lt: String
  postText_gte: String
  postText_lte: String
  postText_in: [String!]
  postText_not_in: [String!]
  postText_contains: String
  postText_contains_nocase: String
  postText_not_contains: String
  postText_not_contains_nocase: String
  postText_starts_with: String
  postText_starts_with_nocase: String
  postText_not_starts_with: String
  postText_not_starts_with_nocase: String
  postText_ends_with: String
  postText_ends_with_nocase: String
  postText_not_ends_with: String
  postText_not_ends_with_nocase: String
  postUrl: String
  postUrl_not: String
  postUrl_gt: String
  postUrl_lt: String
  postUrl_gte: String
  postUrl_lte: String
  postUrl_in: [String!]
  postUrl_not_in: [String!]
  postUrl_contains: String
  postUrl_contains_nocase: String
  postUrl_not_contains: String
  postUrl_not_contains_nocase: String
  postUrl_starts_with: String
  postUrl_starts_with_nocase: String
  postUrl_not_starts_with: String
  postUrl_not_starts_with_nocase: String
  postUrl_ends_with: String
  postUrl_ends_with_nocase: String
  postUrl_not_ends_with: String
  postUrl_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  derivedContext: String
  derivedContext_not: String
  derivedContext_gt: String
  derivedContext_lt: String
  derivedContext_gte: String
  derivedContext_lte: String
  derivedContext_in: [String!]
  derivedContext_not_in: [String!]
  derivedContext_contains: String
  derivedContext_contains_nocase: String
  derivedContext_not_contains: String
  derivedContext_not_contains_nocase: String
  derivedContext_starts_with: String
  derivedContext_starts_with_nocase: String
  derivedContext_not_starts_with: String
  derivedContext_not_starts_with_nocase: String
  derivedContext_ends_with: String
  derivedContext_ends_with_nocase: String
  derivedContext_not_ends_with: String
  derivedContext_not_ends_with_nocase: String
  derivedContextExplanation: String
  derivedContextExplanation_not: String
  derivedContextExplanation_gt: String
  derivedContextExplanation_lt: String
  derivedContextExplanation_gte: String
  derivedContextExplanation_lte: String
  derivedContextExplanation_in: [String!]
  derivedContextExplanation_not_in: [String!]
  derivedContextExplanation_contains: String
  derivedContextExplanation_contains_nocase: String
  derivedContextExplanation_not_contains: String
  derivedContextExplanation_not_contains_nocase: String
  derivedContextExplanation_starts_with: String
  derivedContextExplanation_starts_with_nocase: String
  derivedContextExplanation_not_starts_with: String
  derivedContextExplanation_not_starts_with_nocase: String
  derivedContextExplanation_ends_with: String
  derivedContextExplanation_ends_with_nocase: String
  derivedContextExplanation_not_ends_with: String
  derivedContextExplanation_not_ends_with_nocase: String
  severityScore: BigInt
  severityScore_not: BigInt
  severityScore_gt: BigInt
  severityScore_lt: BigInt
  severityScore_gte: BigInt
  severityScore_lte: BigInt
  severityScore_in: [BigInt!]
  severityScore_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ReportedPostType_filter]
  or: [ReportedPostType_filter]
}

enum ReportedPostType_orderBy {
  id
  recordId
  userId
  postText
  postUrl
  timestamp
  derivedContext
  derivedContextExplanation
  severityScore
  createdAt
}

type ReputationType {
  id: ID!
  userId: Bytes!
  username: String
  platform: String
  postCount: BigInt
  offenseCount: BigInt
  firstOffenseTimestamp: BigInt
  lastOffenseTimestamp: BigInt
  reputationScore: BigInt!
  createdAt: BigInt!
}

input ReputationType_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  userId: Bytes
  userId_not: Bytes
  userId_gt: Bytes
  userId_lt: Bytes
  userId_gte: Bytes
  userId_lte: Bytes
  userId_in: [Bytes!]
  userId_not_in: [Bytes!]
  userId_contains: Bytes
  userId_not_contains: Bytes
  username: String
  username_not: String
  username_gt: String
  username_lt: String
  username_gte: String
  username_lte: String
  username_in: [String!]
  username_not_in: [String!]
  username_contains: String
  username_contains_nocase: String
  username_not_contains: String
  username_not_contains_nocase: String
  username_starts_with: String
  username_starts_with_nocase: String
  username_not_starts_with: String
  username_not_starts_with_nocase: String
  username_ends_with: String
  username_ends_with_nocase: String
  username_not_ends_with: String
  username_not_ends_with_nocase: String
  platform: String
  platform_not: String
  platform_gt: String
  platform_lt: String
  platform_gte: String
  platform_lte: String
  platform_in: [String!]
  platform_not_in: [String!]
  platform_contains: String
  platform_contains_nocase: String
  platform_not_contains: String
  platform_not_contains_nocase: String
  platform_starts_with: String
  platform_starts_with_nocase: String
  platform_not_starts_with: String
  platform_not_starts_with_nocase: String
  platform_ends_with: String
  platform_ends_with_nocase: String
  platform_not_ends_with: String
  platform_not_ends_with_nocase: String
  postCount: BigInt
  postCount_not: BigInt
  postCount_gt: BigInt
  postCount_lt: BigInt
  postCount_gte: BigInt
  postCount_lte: BigInt
  postCount_in: [BigInt!]
  postCount_not_in: [BigInt!]
  offenseCount: BigInt
  offenseCount_not: BigInt
  offenseCount_gt: BigInt
  offenseCount_lt: BigInt
  offenseCount_gte: BigInt
  offenseCount_lte: BigInt
  offenseCount_in: [BigInt!]
  offenseCount_not_in: [BigInt!]
  firstOffenseTimestamp: BigInt
  firstOffenseTimestamp_not: BigInt
  firstOffenseTimestamp_gt: BigInt
  firstOffenseTimestamp_lt: BigInt
  firstOffenseTimestamp_gte: BigInt
  firstOffenseTimestamp_lte: BigInt
  firstOffenseTimestamp_in: [BigInt!]
  firstOffenseTimestamp_not_in: [BigInt!]
  lastOffenseTimestamp: BigInt
  lastOffenseTimestamp_not: BigInt
  lastOffenseTimestamp_gt: BigInt
  lastOffenseTimestamp_lt: BigInt
  lastOffenseTimestamp_gte: BigInt
  lastOffenseTimestamp_lte: BigInt
  lastOffenseTimestamp_in: [BigInt!]
  lastOffenseTimestamp_not_in: [BigInt!]
  reputationScore: BigInt
  reputationScore_not: BigInt
  reputationScore_gt: BigInt
  reputationScore_lt: BigInt
  reputationScore_gte: BigInt
  reputationScore_lte: BigInt
  reputationScore_in: [BigInt!]
  reputationScore_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ReputationType_filter]
  or: [ReputationType_filter]
}

enum ReputationType_orderBy {
  id
  userId
  username
  platform
  postCount
  offenseCount
  firstOffenseTimestamp
  lastOffenseTimestamp
  reputationScore
  createdAt
}

type Subscription {
  reputationType(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ReputationType
  reputationTypes(
    skip: Int = 0
    first: Int = 100
    orderBy: ReputationType_orderBy
    orderDirection: OrderDirection
    where: ReputationType_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ReputationType!]!
  reportedPostType(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ReportedPostType
  reportedPostTypes(
    skip: Int = 0
    first: Int = 100
    orderBy: ReportedPostType_orderBy
    orderDirection: OrderDirection
    where: ReportedPostType_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ReportedPostType!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common.js";

export declare namespace ICoin {
  export type MarketRewardsStruct = {
    totalAmountCurrency: BigNumberish;
    totalAmountCoin: BigNumberish;
    creatorPayoutAmountCurrency: BigNumberish;
    creatorPayoutAmountCoin: BigNumberish;
    platformReferrerAmountCurrency: BigNumberish;
    platformReferrerAmountCoin: BigNumberish;
    protocolAmountCurrency: BigNumberish;
    protocolAmountCoin: BigNumberish;
  };

  export type MarketRewardsStructOutput = [
    totalAmountCurrency: bigint,
    totalAmountCoin: bigint,
    creatorPayoutAmountCurrency: bigint,
    creatorPayoutAmountCoin: bigint,
    platformReferrerAmountCurrency: bigint,
    platformReferrerAmountCoin: bigint,
    protocolAmountCurrency: bigint,
    protocolAmountCoin: bigint,
  ] & {
    totalAmountCurrency: bigint;
    totalAmountCoin: bigint;
    creatorPayoutAmountCurrency: bigint;
    creatorPayoutAmountCoin: bigint;
    platformReferrerAmountCurrency: bigint;
    platformReferrerAmountCoin: bigint;
    protocolAmountCurrency: bigint;
    protocolAmountCoin: bigint;
  };

  export type MarketStateStruct = {
    marketType: BigNumberish;
    marketAddress: AddressLike;
  };

  export type MarketStateStructOutput = [
    marketType: bigint,
    marketAddress: string,
  ] & { marketType: bigint; marketAddress: string };
}

export interface WowXYZERC20Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_TOTAL_SUPPLY"
      | "MIN_ORDER_SIZE"
      | "ORDER_REFERRER_FEE_BPS"
      | "PLATFORM_REFERRER_FEE_BPS"
      | "PROTOCOL_FEE_BPS"
      | "TOKEN_CREATOR_FEE_BPS"
      | "TOTAL_FEE_BPS"
      | "WETH"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "buy"
      | "claimSecondaryRewards"
      | "decimals"
      | "initialize"
      | "lpTokenId"
      | "marketType"
      | "name"
      | "nonfungiblePositionManager"
      | "onERC721Received"
      | "platformReferrer"
      | "poolAddress"
      | "protocolFeeRecipient"
      | "protocolRewards"
      | "sell"
      | "state"
      | "swapRouter"
      | "symbol"
      | "tokenCreator"
      | "tokenURI"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "uniswapV3SwapCallback"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "CoinBuy"
      | "CoinMarketRewards"
      | "CoinSell"
      | "CoinTradeRewards"
      | "CoinTransfer"
      | "Initialized"
      | "Transfer"
      | "WowMarketGraduated"
      | "WowTokenBuy"
      | "WowTokenFees"
      | "WowTokenSell"
      | "WowTokenTransfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_TOTAL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_ORDER_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORDER_REFERRER_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PLATFORM_REFERRER_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROTOCOL_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_CREATOR_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSecondaryRewards",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "lpTokenId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "marketType",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonfungiblePositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "platformReferrer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
    ]
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenCreator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokenURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_TOTAL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_ORDER_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORDER_REFERRER_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PLATFORM_REFERRER_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROTOCOL_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_CREATOR_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimSecondaryRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpTokenId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish,
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CoinBuyEvent {
  export type InputTuple = [
    buyer: AddressLike,
    recipient: AddressLike,
    orderReferrer: AddressLike,
    coinsPurchased: BigNumberish,
    currency: AddressLike,
    amountFee: BigNumberish,
    amountSold: BigNumberish,
    comment: string,
  ];
  export type OutputTuple = [
    buyer: string,
    recipient: string,
    orderReferrer: string,
    coinsPurchased: bigint,
    currency: string,
    amountFee: bigint,
    amountSold: bigint,
    comment: string,
  ];
  export interface OutputObject {
    buyer: string;
    recipient: string;
    orderReferrer: string;
    coinsPurchased: bigint;
    currency: string;
    amountFee: bigint;
    amountSold: bigint;
    comment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CoinMarketRewardsEvent {
  export type InputTuple = [
    creatorPayoutAddress: AddressLike,
    platformReferrer: AddressLike,
    protocolRewardRecipient: AddressLike,
    currency: AddressLike,
    marketRewards: ICoin.MarketRewardsStruct,
  ];
  export type OutputTuple = [
    creatorPayoutAddress: string,
    platformReferrer: string,
    protocolRewardRecipient: string,
    currency: string,
    marketRewards: ICoin.MarketRewardsStructOutput,
  ];
  export interface OutputObject {
    creatorPayoutAddress: string;
    platformReferrer: string;
    protocolRewardRecipient: string;
    currency: string;
    marketRewards: ICoin.MarketRewardsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CoinSellEvent {
  export type InputTuple = [
    seller: AddressLike,
    recipient: AddressLike,
    orderReferrer: AddressLike,
    coinsSold: BigNumberish,
    currency: AddressLike,
    amountFee: BigNumberish,
    amountPurchased: BigNumberish,
    comment: string,
  ];
  export type OutputTuple = [
    seller: string,
    recipient: string,
    orderReferrer: string,
    coinsSold: bigint,
    currency: string,
    amountFee: bigint,
    amountPurchased: bigint,
    comment: string,
  ];
  export interface OutputObject {
    seller: string;
    recipient: string;
    orderReferrer: string;
    coinsSold: bigint;
    currency: string;
    amountFee: bigint;
    amountPurchased: bigint;
    comment: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CoinTradeRewardsEvent {
  export type InputTuple = [
    creatorPayoutRecipient: AddressLike,
    platformReferrer: AddressLike,
    orderReferrer: AddressLike,
    protocolRewardRecipient: AddressLike,
    creatorReward: BigNumberish,
    platformReferrerReward: BigNumberish,
    orderReferrerReward: BigNumberish,
    protocolReward: BigNumberish,
    currency: AddressLike,
  ];
  export type OutputTuple = [
    creatorPayoutRecipient: string,
    platformReferrer: string,
    orderReferrer: string,
    protocolRewardRecipient: string,
    creatorReward: bigint,
    platformReferrerReward: bigint,
    orderReferrerReward: bigint,
    protocolReward: bigint,
    currency: string,
  ];
  export interface OutputObject {
    creatorPayoutRecipient: string;
    platformReferrer: string;
    orderReferrer: string;
    protocolRewardRecipient: string;
    creatorReward: bigint;
    platformReferrerReward: bigint;
    orderReferrerReward: bigint;
    protocolReward: bigint;
    currency: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CoinTransferEvent {
  export type InputTuple = [
    sender: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish,
    senderBalance: BigNumberish,
    recipientBalance: BigNumberish,
  ];
  export type OutputTuple = [
    sender: string,
    recipient: string,
    amount: bigint,
    senderBalance: bigint,
    recipientBalance: bigint,
  ];
  export interface OutputObject {
    sender: string;
    recipient: string;
    amount: bigint;
    senderBalance: bigint;
    recipientBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish,
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WowMarketGraduatedEvent {
  export type InputTuple = [
    tokenAddress: AddressLike,
    poolAddress: AddressLike,
    totalEthLiquidity: BigNumberish,
    totalTokenLiquidity: BigNumberish,
    lpPositionId: BigNumberish,
    marketType: BigNumberish,
  ];
  export type OutputTuple = [
    tokenAddress: string,
    poolAddress: string,
    totalEthLiquidity: bigint,
    totalTokenLiquidity: bigint,
    lpPositionId: bigint,
    marketType: bigint,
  ];
  export interface OutputObject {
    tokenAddress: string;
    poolAddress: string;
    totalEthLiquidity: bigint;
    totalTokenLiquidity: bigint;
    lpPositionId: bigint;
    marketType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WowTokenBuyEvent {
  export type InputTuple = [
    buyer: AddressLike,
    recipient: AddressLike,
    orderReferrer: AddressLike,
    totalEth: BigNumberish,
    ethFee: BigNumberish,
    ethSold: BigNumberish,
    tokensBought: BigNumberish,
    buyerTokenBalance: BigNumberish,
    comment: string,
    totalSupply: BigNumberish,
    marketType: BigNumberish,
  ];
  export type OutputTuple = [
    buyer: string,
    recipient: string,
    orderReferrer: string,
    totalEth: bigint,
    ethFee: bigint,
    ethSold: bigint,
    tokensBought: bigint,
    buyerTokenBalance: bigint,
    comment: string,
    totalSupply: bigint,
    marketType: bigint,
  ];
  export interface OutputObject {
    buyer: string;
    recipient: string;
    orderReferrer: string;
    totalEth: bigint;
    ethFee: bigint;
    ethSold: bigint;
    tokensBought: bigint;
    buyerTokenBalance: bigint;
    comment: string;
    totalSupply: bigint;
    marketType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WowTokenFeesEvent {
  export type InputTuple = [
    tokenCreator: AddressLike,
    platformReferrer: AddressLike,
    orderReferrer: AddressLike,
    protocolFeeRecipient: AddressLike,
    tokenCreatorFee: BigNumberish,
    platformReferrerFee: BigNumberish,
    orderReferrerFee: BigNumberish,
    protocolFee: BigNumberish,
  ];
  export type OutputTuple = [
    tokenCreator: string,
    platformReferrer: string,
    orderReferrer: string,
    protocolFeeRecipient: string,
    tokenCreatorFee: bigint,
    platformReferrerFee: bigint,
    orderReferrerFee: bigint,
    protocolFee: bigint,
  ];
  export interface OutputObject {
    tokenCreator: string;
    platformReferrer: string;
    orderReferrer: string;
    protocolFeeRecipient: string;
    tokenCreatorFee: bigint;
    platformReferrerFee: bigint;
    orderReferrerFee: bigint;
    protocolFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WowTokenSellEvent {
  export type InputTuple = [
    seller: AddressLike,
    recipient: AddressLike,
    orderReferrer: AddressLike,
    totalEth: BigNumberish,
    ethFee: BigNumberish,
    ethBought: BigNumberish,
    tokensSold: BigNumberish,
    sellerTokenBalance: BigNumberish,
    comment: string,
    totalSupply: BigNumberish,
    marketType: BigNumberish,
  ];
  export type OutputTuple = [
    seller: string,
    recipient: string,
    orderReferrer: string,
    totalEth: bigint,
    ethFee: bigint,
    ethBought: bigint,
    tokensSold: bigint,
    sellerTokenBalance: bigint,
    comment: string,
    totalSupply: bigint,
    marketType: bigint,
  ];
  export interface OutputObject {
    seller: string;
    recipient: string;
    orderReferrer: string;
    totalEth: bigint;
    ethFee: bigint;
    ethBought: bigint;
    tokensSold: bigint;
    sellerTokenBalance: bigint;
    comment: string;
    totalSupply: bigint;
    marketType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WowTokenTransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    fromTokenBalance: BigNumberish,
    toTokenBalance: BigNumberish,
    totalSupply: BigNumberish,
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    amount: bigint,
    fromTokenBalance: bigint,
    toTokenBalance: bigint,
    totalSupply: bigint,
  ];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
    fromTokenBalance: bigint;
    toTokenBalance: bigint;
    totalSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WowXYZERC20 extends BaseContract {
  connect(runner?: ContractRunner | null): WowXYZERC20;
  waitForDeployment(): Promise<this>;

  interface: WowXYZERC20Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_TOTAL_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  MIN_ORDER_SIZE: TypedContractMethod<[], [bigint], "view">;

  ORDER_REFERRER_FEE_BPS: TypedContractMethod<[], [bigint], "view">;

  PLATFORM_REFERRER_FEE_BPS: TypedContractMethod<[], [bigint], "view">;

  PROTOCOL_FEE_BPS: TypedContractMethod<[], [bigint], "view">;

  TOKEN_CREATOR_FEE_BPS: TypedContractMethod<[], [bigint], "view">;

  TOTAL_FEE_BPS: TypedContractMethod<[], [bigint], "view">;

  WETH: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  buy: TypedContractMethod<
    [
      recipient: AddressLike,
      arg1: AddressLike,
      orderReferrer: AddressLike,
      comment: string,
      arg4: BigNumberish,
      minOrderSize: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
    ],
    [bigint],
    "payable"
  >;

  claimSecondaryRewards: TypedContractMethod<
    [pushEthRewards: boolean],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      _creator: AddressLike,
      _platformReferrer: AddressLike,
      _tokenURI: string,
      _name: string,
      _symbol: string,
    ],
    [void],
    "payable"
  >;

  lpTokenId: TypedContractMethod<[], [bigint], "view">;

  marketType: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nonfungiblePositionManager: TypedContractMethod<[], [string], "view">;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  platformReferrer: TypedContractMethod<[], [string], "view">;

  poolAddress: TypedContractMethod<[], [string], "view">;

  protocolFeeRecipient: TypedContractMethod<[], [string], "view">;

  protocolRewards: TypedContractMethod<[], [string], "view">;

  sell: TypedContractMethod<
    [
      amount: BigNumberish,
      recipient: AddressLike,
      orderReferrer: AddressLike,
      comment: string,
      arg4: BigNumberish,
      minPayoutSize: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
    ],
    [bigint],
    "nonpayable"
  >;

  state: TypedContractMethod<[], [ICoin.MarketStateStructOutput], "view">;

  swapRouter: TypedContractMethod<[], [string], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenCreator: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  uniswapV3SwapCallback: TypedContractMethod<
    [amount0Delta: BigNumberish, amount1Delta: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_TOTAL_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_ORDER_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ORDER_REFERRER_FEE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PLATFORM_REFERRER_FEE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PROTOCOL_FEE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKEN_CREATOR_FEE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOTAL_FEE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      arg1: AddressLike,
      orderReferrer: AddressLike,
      comment: string,
      arg4: BigNumberish,
      minOrderSize: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "claimSecondaryRewards"
  ): TypedContractMethod<[pushEthRewards: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _creator: AddressLike,
      _platformReferrer: AddressLike,
      _tokenURI: string,
      _name: string,
      _symbol: string,
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "lpTokenId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "marketType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonfungiblePositionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "platformReferrer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolFeeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolRewards"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sell"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      recipient: AddressLike,
      orderReferrer: AddressLike,
      comment: string,
      arg4: BigNumberish,
      minPayoutSize: BigNumberish,
      sqrtPriceLimitX96: BigNumberish,
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<[], [ICoin.MarketStateStructOutput], "view">;
  getFunction(
    nameOrSignature: "swapRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenCreator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uniswapV3SwapCallback"
  ): TypedContractMethod<
    [amount0Delta: BigNumberish, amount1Delta: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "CoinBuy"
  ): TypedContractEvent<
    CoinBuyEvent.InputTuple,
    CoinBuyEvent.OutputTuple,
    CoinBuyEvent.OutputObject
  >;
  getEvent(
    key: "CoinMarketRewards"
  ): TypedContractEvent<
    CoinMarketRewardsEvent.InputTuple,
    CoinMarketRewardsEvent.OutputTuple,
    CoinMarketRewardsEvent.OutputObject
  >;
  getEvent(
    key: "CoinSell"
  ): TypedContractEvent<
    CoinSellEvent.InputTuple,
    CoinSellEvent.OutputTuple,
    CoinSellEvent.OutputObject
  >;
  getEvent(
    key: "CoinTradeRewards"
  ): TypedContractEvent<
    CoinTradeRewardsEvent.InputTuple,
    CoinTradeRewardsEvent.OutputTuple,
    CoinTradeRewardsEvent.OutputObject
  >;
  getEvent(
    key: "CoinTransfer"
  ): TypedContractEvent<
    CoinTransferEvent.InputTuple,
    CoinTransferEvent.OutputTuple,
    CoinTransferEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "WowMarketGraduated"
  ): TypedContractEvent<
    WowMarketGraduatedEvent.InputTuple,
    WowMarketGraduatedEvent.OutputTuple,
    WowMarketGraduatedEvent.OutputObject
  >;
  getEvent(
    key: "WowTokenBuy"
  ): TypedContractEvent<
    WowTokenBuyEvent.InputTuple,
    WowTokenBuyEvent.OutputTuple,
    WowTokenBuyEvent.OutputObject
  >;
  getEvent(
    key: "WowTokenFees"
  ): TypedContractEvent<
    WowTokenFeesEvent.InputTuple,
    WowTokenFeesEvent.OutputTuple,
    WowTokenFeesEvent.OutputObject
  >;
  getEvent(
    key: "WowTokenSell"
  ): TypedContractEvent<
    WowTokenSellEvent.InputTuple,
    WowTokenSellEvent.OutputTuple,
    WowTokenSellEvent.OutputObject
  >;
  getEvent(
    key: "WowTokenTransfer"
  ): TypedContractEvent<
    WowTokenTransferEvent.InputTuple,
    WowTokenTransferEvent.OutputTuple,
    WowTokenTransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "CoinBuy(address,address,address,uint256,address,uint256,uint256,string)": TypedContractEvent<
      CoinBuyEvent.InputTuple,
      CoinBuyEvent.OutputTuple,
      CoinBuyEvent.OutputObject
    >;
    CoinBuy: TypedContractEvent<
      CoinBuyEvent.InputTuple,
      CoinBuyEvent.OutputTuple,
      CoinBuyEvent.OutputObject
    >;

    "CoinMarketRewards(address,address,address,address,tuple)": TypedContractEvent<
      CoinMarketRewardsEvent.InputTuple,
      CoinMarketRewardsEvent.OutputTuple,
      CoinMarketRewardsEvent.OutputObject
    >;
    CoinMarketRewards: TypedContractEvent<
      CoinMarketRewardsEvent.InputTuple,
      CoinMarketRewardsEvent.OutputTuple,
      CoinMarketRewardsEvent.OutputObject
    >;

    "CoinSell(address,address,address,uint256,address,uint256,uint256,string)": TypedContractEvent<
      CoinSellEvent.InputTuple,
      CoinSellEvent.OutputTuple,
      CoinSellEvent.OutputObject
    >;
    CoinSell: TypedContractEvent<
      CoinSellEvent.InputTuple,
      CoinSellEvent.OutputTuple,
      CoinSellEvent.OutputObject
    >;

    "CoinTradeRewards(address,address,address,address,uint256,uint256,uint256,uint256,address)": TypedContractEvent<
      CoinTradeRewardsEvent.InputTuple,
      CoinTradeRewardsEvent.OutputTuple,
      CoinTradeRewardsEvent.OutputObject
    >;
    CoinTradeRewards: TypedContractEvent<
      CoinTradeRewardsEvent.InputTuple,
      CoinTradeRewardsEvent.OutputTuple,
      CoinTradeRewardsEvent.OutputObject
    >;

    "CoinTransfer(address,address,uint256,uint256,uint256)": TypedContractEvent<
      CoinTransferEvent.InputTuple,
      CoinTransferEvent.OutputTuple,
      CoinTransferEvent.OutputObject
    >;
    CoinTransfer: TypedContractEvent<
      CoinTransferEvent.InputTuple,
      CoinTransferEvent.OutputTuple,
      CoinTransferEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "WowMarketGraduated(address,address,uint256,uint256,uint256,uint8)": TypedContractEvent<
      WowMarketGraduatedEvent.InputTuple,
      WowMarketGraduatedEvent.OutputTuple,
      WowMarketGraduatedEvent.OutputObject
    >;
    WowMarketGraduated: TypedContractEvent<
      WowMarketGraduatedEvent.InputTuple,
      WowMarketGraduatedEvent.OutputTuple,
      WowMarketGraduatedEvent.OutputObject
    >;

    "WowTokenBuy(address,address,address,uint256,uint256,uint256,uint256,uint256,string,uint256,uint8)": TypedContractEvent<
      WowTokenBuyEvent.InputTuple,
      WowTokenBuyEvent.OutputTuple,
      WowTokenBuyEvent.OutputObject
    >;
    WowTokenBuy: TypedContractEvent<
      WowTokenBuyEvent.InputTuple,
      WowTokenBuyEvent.OutputTuple,
      WowTokenBuyEvent.OutputObject
    >;

    "WowTokenFees(address,address,address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      WowTokenFeesEvent.InputTuple,
      WowTokenFeesEvent.OutputTuple,
      WowTokenFeesEvent.OutputObject
    >;
    WowTokenFees: TypedContractEvent<
      WowTokenFeesEvent.InputTuple,
      WowTokenFeesEvent.OutputTuple,
      WowTokenFeesEvent.OutputObject
    >;

    "WowTokenSell(address,address,address,uint256,uint256,uint256,uint256,uint256,string,uint256,uint8)": TypedContractEvent<
      WowTokenSellEvent.InputTuple,
      WowTokenSellEvent.OutputTuple,
      WowTokenSellEvent.OutputObject
    >;
    WowTokenSell: TypedContractEvent<
      WowTokenSellEvent.InputTuple,
      WowTokenSellEvent.OutputTuple,
      WowTokenSellEvent.OutputObject
    >;

    "WowTokenTransfer(address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      WowTokenTransferEvent.InputTuple,
      WowTokenTransferEvent.OutputTuple,
      WowTokenTransferEvent.OutputObject
    >;
    WowTokenTransfer: TypedContractEvent<
      WowTokenTransferEvent.InputTuple,
      WowTokenTransferEvent.OutputTuple,
      WowTokenTransferEvent.OutputObject
    >;
  };
}

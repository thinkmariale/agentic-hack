{
  "address": "0x984B06553b696d813A0D2C4475ba9aF5405EeeEe",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "username",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "platform",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "reputationScore",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "firstOffenseTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastOffenseTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "postCount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "offenseCount",
          "type": "uint128"
        }
      ],
      "name": "NewInfrigmentUser",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "recordId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "postText",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "postUrl",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "derivedContext",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "derivedContextExplanation",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "severityScore",
          "type": "uint128"
        }
      ],
      "name": "ReportedPost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "reputationScore",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "firstOffenseTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastOffenseTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "postCount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "offenseCount",
          "type": "uint128"
        }
      ],
      "name": "UpdateInfrigmentUser",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "recordId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "derivedContext",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "derivedContextExplanation",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "severityScore",
          "type": "uint128"
        }
      ],
      "name": "UpdatedReportedPost",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "userId",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "platform",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "username",
              "type": "string"
            },
            {
              "internalType": "uint128",
              "name": "postCount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "offenseCount",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "firstOffenseTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastOffenseTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "reputationScore",
              "type": "uint128"
            }
          ],
          "internalType": "struct ICopyrightInfringementUser",
          "name": "_addUser",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "recordId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "userId",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "contentHash",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "postText",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "postUrl",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "derivedContext",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "derivedContextExplanation",
              "type": "string"
            },
            {
              "internalType": "uint128",
              "name": "severityScore",
              "type": "uint128"
            }
          ],
          "internalType": "struct IReportedPost",
          "name": "_addPost",
          "type": "tuple"
        }
      ],
      "name": "AddInfringement",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contentHash",
          "type": "uint256"
        }
      ],
      "name": "GetReportedPost",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "recordId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "userId",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "contentHash",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "postText",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "postUrl",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "derivedContext",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "derivedContextExplanation",
              "type": "string"
            },
            {
              "internalType": "uint128",
              "name": "severityScore",
              "type": "uint128"
            }
          ],
          "internalType": "struct IReportedPost",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userId",
          "type": "address"
        }
      ],
      "name": "GetReputationScore",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userId",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_reputationScore",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "_firstOffenseTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastOffenseTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "_postCount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_offenseCount",
          "type": "uint128"
        }
      ],
      "name": "UpdateCopyrightInfringementUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_recordId",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "_severityScore",
          "type": "uint128"
        },
        {
          "internalType": "string",
          "name": "_derivedContext",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_derivedContextExplanatio",
          "type": "string"
        }
      ],
      "name": "UpdatePost",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "contentHashPosts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "greeting",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "posts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "recordId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "userId",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "contentHash",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "postText",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "postUrl",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "derivedContext",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "derivedContextExplanation",
          "type": "string"
        },
        {
          "internalType": "uint128",
          "name": "severityScore",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "address",
          "name": "userId",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "platform",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        },
        {
          "internalType": "uint128",
          "name": "postCount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "offenseCount",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "firstOffenseTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastOffenseTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "reputationScore",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa6164019969b4870709d8ae6078c3b0688f106bf6801ca75b086b13e0dd8c227",
  "receipt": {
    "to": null,
    "from": "0x5C834344F33d1E7eB8306149B2E57D2f4c1625C9",
    "contractAddress": "0x984B06553b696d813A0D2C4475ba9aF5405EeeEe",
    "transactionIndex": 36,
    "gasUsed": "1704035",
    "logsBloom": "0x
    "blockHash": "0x87b8ca83499054f91b9f1700bb1d538c8a3dc247b51e4b75e4372e65145c0472",
    "transactionHash": "0xa6164019969b4870709d8ae6078c3b0688f106bf6801ca75b086b13e0dd8c227",
    "logs": [],
    "blockNumber": 21612812,
    "cumulativeGasUsed": "6601816",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5C834344F33d1E7eB8306149B2E57D2f4c1625C9"
  ],
  "numDeployments": 1,
  "solcInputHash": "5bc9b0e85e8f7d731bf9a7599f051266",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"platform\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"reputationScore\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstOffenseTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastOffenseTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"postCount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"offenseCount\",\"type\":\"uint128\"}],\"name\":\"NewInfrigmentUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"recordId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"postText\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"postUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"derivedContext\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"derivedContextExplanation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"severityScore\",\"type\":\"uint128\"}],\"name\":\"ReportedPost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"reputationScore\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstOffenseTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastOffenseTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"postCount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"offenseCount\",\"type\":\"uint128\"}],\"name\":\"UpdateInfrigmentUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"recordId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"derivedContext\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"derivedContextExplanation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"severityScore\",\"type\":\"uint128\"}],\"name\":\"UpdatedReportedPost\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userId\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"platform\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"postCount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"offenseCount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"firstOffenseTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastOffenseTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"reputationScore\",\"type\":\"uint128\"}],\"internalType\":\"struct ICopyrightInfringementUser\",\"name\":\"_addUser\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"recordId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contentHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"postText\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"postUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"derivedContext\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"derivedContextExplanation\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"severityScore\",\"type\":\"uint128\"}],\"internalType\":\"struct IReportedPost\",\"name\":\"_addPost\",\"type\":\"tuple\"}],\"name\":\"AddInfringement\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contentHash\",\"type\":\"uint256\"}],\"name\":\"GetReportedPost\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"recordId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contentHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"postText\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"postUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"derivedContext\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"derivedContextExplanation\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"severityScore\",\"type\":\"uint128\"}],\"internalType\":\"struct IReportedPost\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userId\",\"type\":\"address\"}],\"name\":\"GetReputationScore\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userId\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_reputationScore\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"_firstOffenseTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastOffenseTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_postCount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_offenseCount\",\"type\":\"uint128\"}],\"name\":\"UpdateCopyrightInfringementUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_recordId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_severityScore\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"_derivedContext\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_derivedContextExplanatio\",\"type\":\"string\"}],\"name\":\"UpdatePost\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contentHashPosts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"greeting\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"posts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"recordId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contentHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"postText\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"postUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"derivedContext\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"derivedContextExplanation\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"severityScore\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userId\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"platform\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"postCount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"offenseCount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"firstOffenseTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastOffenseTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"reputationScore\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"AddInfringement((address,string,string,uint128,uint128,uint256,uint256,uint128),(uint256,address,uint256,string,string,uint256,string,string,uint128))\":{\"notice\":\"Function that allows the owner to add new infringements\"},\"GetReportedPost(uint256)\":{\"notice\":\"Function to get post by hash\"},\"GetReputationScore(address)\":{\"notice\":\"Function to get reputation score of a user\"},\"UpdateCopyrightInfringementUser(address,uint128,uint256,uint256,uint128,uint128)\":{\"notice\":\"Function that allows the owner to update an infringement user\"},\"UpdatePost(uint256,uint128,string,string)\":{\"notice\":\"Function that allows the owner to update an infringement user\"},\"withdraw()\":{\"notice\":\"Function that allows the owner to withdraw all the Ether in the contract The function can only be called by the owner of the contract as defined by the isOwner modifier\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReputationAgent.sol\":\"ReputationAgent\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ReputationAgent.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n// Useful for debugging. Remove when deploying to a live network.\\nimport \\\"hardhat/console.sol\\\";\\n\\n// Use openzeppelin to inherit battle-tested implementations (ERC20, ERC721, etc)\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * A smart contract to track IP users reputation and offenses of infringement\\n */\\n \\n\\n struct ICopyrightInfringementUser {\\n    address userId;\\n    string platform;\\n    string username;\\n    uint128 postCount;\\n    uint128 offenseCount;\\n    uint256 firstOffenseTimestamp;\\n    uint256 lastOffenseTimestamp;\\n    uint128 reputationScore;\\n}\\n struct IReportedPost {\\n    uint256 recordId;\\n    address userId;\\n    uint256 contentHash;\\n    string postText;\\n    string postUrl;\\n    uint256 timestamp;\\n    string derivedContext;\\n    string derivedContextExplanation;\\n    uint128 severityScore;\\n}\\ncontract ReputationAgent {\\n    // State Variables\\n    string public greeting = \\\"Be good to IP!\\\";\\n\\n    address public immutable owner;\\n    // address public immutable manager = 0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199;\\n    // address public immutable manager_1 = 0x7549D03022252D136fa62FCF184ef77ec05D3F07;\\n\\n    mapping(address => ICopyrightInfringementUser) public users;\\n    mapping(uint256 => IReportedPost) public posts;\\n    mapping (uint256 => uint256) public contentHashPosts;\\n\\n    event NewInfrigmentUser(address indexed userId, string username, string platform, uint128 reputationScore, uint256 firstOffenseTimestamp,  uint256 lastOffenseTimestamp, uint128 postCount, uint128 offenseCount);\\n    event ReportedPost(uint256 indexed recordId, address userId,string postText,string postUrl,uint256 timestamp,string derivedContext,string derivedContextExplanation,uint128 severityScore);\\n\\n    event UpdateInfrigmentUser(address indexed userId, uint128 reputationScore, uint256 firstOffenseTimestamp, uint256 lastOffenseTimestamp, uint128 postCount, uint128 offenseCount);\\n    event UpdatedReportedPost(uint256 indexed recordId,string derivedContext,string derivedContextExplanation,uint128 severityScore);\\n\\n    // Constructor: Called once on contract deployment\\n    constructor(address _owner) {\\n        owner = _owner;\\n    }\\n\\n    // Modifier: used to define a set of rules that must be met before or after a function is executed\\n    modifier isOwner() {\\n        // require((msg.sender == manager || msg.sender == owner || msg.sender == manager_1), \\\"Not the Owner or Manager\\\");\\n        require(msg.sender == owner, \\\"Not the Owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * Function that allows the owner to add new infringements\\n     *\\n     */\\n    function AddInfringement(ICopyrightInfringementUser memory _addUser, IReportedPost memory _addPost) external isOwner returns (bool) {\\n        // console.log(\\\"Adding infringement\\\", _addUser.userId);\\n        users[_addUser.userId] = _addUser;\\n        if( users[_addUser.userId].postCount == 0) {\\n            users[_addUser.userId].postCount = 1;\\n        }\\n        posts[_addPost.recordId] = _addPost;\\n        contentHashPosts[_addPost.contentHash] = _addPost.recordId;\\n       \\n        emit ReportedPost(_addPost.recordId,_addPost.userId,_addPost.postText,_addPost.postUrl,_addPost.timestamp,_addPost.derivedContext,_addPost.derivedContextExplanation,_addPost.severityScore);\\n        emit NewInfrigmentUser(_addUser.userId, _addUser.username, _addUser.platform, _addUser.reputationScore,_addUser.firstOffenseTimestamp,_addUser.lastOffenseTimestamp,_addUser.postCount,_addUser.offenseCount);\\n        \\n        return true;\\n    }\\n\\n    /**\\n     * Function that allows the owner to update an infringement user\\n     *\\n     */\\n    function UpdateCopyrightInfringementUser(address _userId, uint128 _reputationScore, uint256 _firstOffenseTimestamp, uint256 _lastOffenseTimestamp, uint128 _postCount, uint128 _offenseCount) public isOwner returns (bool) {\\n        // console.log(\\\"updateCopyrightInfringementUser\\\", _userId);\\n       if(users[_userId].postCount != 0) {\\n            users[_userId].reputationScore = _reputationScore;\\n            users[_userId].firstOffenseTimestamp = _firstOffenseTimestamp;\\n            users[_userId].lastOffenseTimestamp = _lastOffenseTimestamp;\\n            users[_userId].postCount = _postCount;\\n            users[_userId].offenseCount = _offenseCount;\\n            \\n            emit UpdateInfrigmentUser(_userId, _reputationScore, _firstOffenseTimestamp, _lastOffenseTimestamp, _postCount, _offenseCount);\\n       }\\n       return true;\\n    }\\n    /**\\n     * Function that allows the owner to update an infringement user\\n     *\\n     */\\n    function UpdatePost(uint256 _recordId, uint128 _severityScore, string memory _derivedContext, string memory _derivedContextExplanatio)  public isOwner returns (bool) {\\n        // console.log(\\\"UpdatePost\\\", _recordId);\\n       if(posts[_recordId].contentHash != 0) {\\n           posts[_recordId].severityScore = _severityScore;\\n           posts[_recordId].derivedContext = _derivedContext;\\n           posts[_recordId].derivedContextExplanation = _derivedContextExplanatio;\\n        \\n           emit UpdatedReportedPost(_recordId, _derivedContext, _derivedContextExplanatio, _severityScore);\\n       }\\n       return true;\\n    }\\n    /**\\n     * Function to get reputation score of a user\\n     *\\n     */\\n    function GetReputationScore(address _userId) public view returns (uint128) {\\n        uint128 reputation = users[_userId].reputationScore;\\n        return reputation;\\n    }\\n    /**\\n     * Function to get post by hash\\n     *\\n     */\\n    function GetReportedPost(uint256 _contentHash) public view  returns (IReportedPost memory) {\\n        if(contentHashPosts[_contentHash] !=0) {\\n            uint256 c = contentHashPosts[_contentHash]; \\n            return posts[c];\\n        }\\n        return posts[0];\\n    }\\n    /**\\n     * Function that allows the owner to withdraw all the Ether in the contract\\n     * The function can only be called by the owner of the contract as defined by the isOwner modifier\\n     */\\n    function withdraw() public isOwner {\\n        (bool success, ) = owner.call{ value: address(this).balance }(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n    }\\n\\n    /**\\n     * Function that allows the contract to receive ETH\\n     */\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd5eb31b3c7324dc3b5d7593d3ecf61bb435711acc70139e2cc257e80419231cc\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052600e60a09081526d426520676f6f6420746f2049502160901b60c0526000906200002f908262000117565b503480156200003d57600080fd5b5060405162001fa638038062001fa68339810160408190526200006091620001e3565b6001600160a01b031660805262000215565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200009d57607f821691505b602082108103620000be57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200011257600081815260208120601f850160051c81016020861015620000ed5750805b601f850160051c820191505b818110156200010e57828155600101620000f9565b5050505b505050565b81516001600160401b0381111562000133576200013362000072565b6200014b8162000144845462000088565b84620000c4565b602080601f8311600181146200018357600084156200016a5750858301515b600019600386901b1c1916600185901b1785556200010e565b600085815260208120601f198616915b82811015620001b45788860151825594840194600190910190840162000193565b5085821015620001d35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215620001f657600080fd5b81516001600160a01b03811681146200020e57600080fd5b9392505050565b608051611d5262000254600039600081816102050152818161055d01528181610663015281816106a401528181610f3601526112500152611d526000f3fe6080604052600436106100a05760003560e01c8063784f901d11610064578063784f901d146101995780638da5cb5b146101f3578063a87430ba1461023f578063cc52d02614610273578063e42c217814610293578063ef690cc0146102b357600080fd5b80630b1e7f83146100ac57806333432ac7146100ea5780633ccfd60b1461011a57806343b04a0a146101315780636468a8491461015e57600080fd5b366100a757005b600080fd5b3480156100b857600080fd5b506100cc6100c73660046113ff565b6102d5565b6040516100e19998979695949392919061145e565b60405180910390f35b3480156100f657600080fd5b5061010a610105366004611600565b610550565b60405190151581526020016100e1565b34801561012657600080fd5b5061012f610658565b005b34801561013d57600080fd5b5061015161014c3660046113ff565b61075d565b6040516100e1919061167e565b34801561016a57600080fd5b5061018b6101793660046113ff565b60036020526000908152604090205481565b6040519081526020016100e1565b3480156101a557600080fd5b506101db6101b436600461176f565b6001600160a01b03166000908152600160205260409020600601546001600160801b031690565b6040516001600160801b0390911681526020016100e1565b3480156101ff57600080fd5b506102277f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100e1565b34801561024b57600080fd5b5061025f61025a36600461176f565b610dbb565b6040516100e1989796959493929190611791565b34801561027f57600080fd5b5061010a61028e366004611902565b610f29565b34801561029f57600080fd5b5061010a6102ae366004611a11565b611243565b3480156102bf57600080fd5b506102c8611371565b6040516100e19190611a77565b6002602081905260009182526040909120805460018201549282015460038301805492946001600160a01b031693919261030e90611a8a565b80601f016020809104026020016040519081016040528092919081815260200182805461033a90611a8a565b80156103875780601f1061035c57610100808354040283529160200191610387565b820191906000526020600020905b81548152906001019060200180831161036a57829003601f168201915b50505050509080600401805461039c90611a8a565b80601f01602080910402602001604051908101604052809291908181526020018280546103c890611a8a565b80156104155780601f106103ea57610100808354040283529160200191610415565b820191906000526020600020905b8154815290600101906020018083116103f857829003601f168201915b50505050509080600501549080600601805461043090611a8a565b80601f016020809104026020016040519081016040528092919081815260200182805461045c90611a8a565b80156104a95780601f1061047e576101008083540402835291602001916104a9565b820191906000526020600020905b81548152906001019060200180831161048c57829003601f168201915b5050505050908060070180546104be90611a8a565b80601f01602080910402602001604051908101604052809291908181526020018280546104ea90611a8a565b80156105375780601f1061050c57610100808354040283529160200191610537565b820191906000526020600020905b81548152906001019060200180831161051a57829003601f168201915b505050600890930154919250506001600160801b031689565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105a35760405162461bcd60e51b815260040161059a90611ac4565b60405180910390fd5b600085815260026020819052604090912001541561064d5760008581526002602052604090206008810180546001600160801b0319166001600160801b0387161790556006016105f38482611b3a565b50600085815260026020526040902060070161060f8382611b3a565b50847f8ddfcc44b666de67165289bff708991845dfef09de07e721a84f409114806a2184848760405161064493929190611bfa565b60405180910390a25b506001949350505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106a05760405162461bcd60e51b815260040161059a90611ac4565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03164760405160006040518083038185875af1925050503d806000811461070d576040519150601f19603f3d011682016040523d82523d6000602084013e610712565b606091505b505090508061075a5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b604482015260640161059a565b50565b6107be6040518061012001604052806000815260200160006001600160a01b0316815260200160008152602001606081526020016060815260200160008152602001606081526020016060815260200160006001600160801b031681525090565b60008281526003602052604090205415610a93576000828152600360208181526040808420548085526002808452948290208251610120810184528154815260018201546001600160a01b031694810194909452948501549183019190915291830180549293919260608401919061083590611a8a565b80601f016020809104026020016040519081016040528092919081815260200182805461086190611a8a565b80156108ae5780601f10610883576101008083540402835291602001916108ae565b820191906000526020600020905b81548152906001019060200180831161089157829003601f168201915b505050505081526020016004820180546108c790611a8a565b80601f01602080910402602001604051908101604052809291908181526020018280546108f390611a8a565b80156109405780601f1061091557610100808354040283529160200191610940565b820191906000526020600020905b81548152906001019060200180831161092357829003601f168201915b505050505081526020016005820154815260200160068201805461096390611a8a565b80601f016020809104026020016040519081016040528092919081815260200182805461098f90611a8a565b80156109dc5780601f106109b1576101008083540402835291602001916109dc565b820191906000526020600020905b8154815290600101906020018083116109bf57829003601f168201915b505050505081526020016007820180546109f590611a8a565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2190611a8a565b8015610a6e5780601f10610a4357610100808354040283529160200191610a6e565b820191906000526020600020905b815481529060010190602001808311610a5157829003601f168201915b5050509183525050600891909101546001600160801b03166020909101529392505050565b600080526002602090815260408051610120810182527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b805482527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077c546001600160a01b0316938201939093527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077d54918101919091527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077e8054919291606084019190610b5e90611a8a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8a90611a8a565b8015610bd75780601f10610bac57610100808354040283529160200191610bd7565b820191906000526020600020905b815481529060010190602001808311610bba57829003601f168201915b50505050508152602001600482018054610bf090611a8a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1c90611a8a565b8015610c695780601f10610c3e57610100808354040283529160200191610c69565b820191906000526020600020905b815481529060010190602001808311610c4c57829003601f168201915b5050505050815260200160058201548152602001600682018054610c8c90611a8a565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb890611a8a565b8015610d055780601f10610cda57610100808354040283529160200191610d05565b820191906000526020600020905b815481529060010190602001808311610ce857829003601f168201915b50505050508152602001600782018054610d1e90611a8a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4a90611a8a565b8015610d975780601f10610d6c57610100808354040283529160200191610d97565b820191906000526020600020905b815481529060010190602001808311610d7a57829003601f168201915b5050509183525050600891909101546001600160801b031660209091015292915050565b6001602081905260009182526040909120805491810180546001600160a01b0390931692610de890611a8a565b80601f0160208091040260200160405190810160405280929190818152602001828054610e1490611a8a565b8015610e615780601f10610e3657610100808354040283529160200191610e61565b820191906000526020600020905b815481529060010190602001808311610e4457829003601f168201915b505050505090806002018054610e7690611a8a565b80601f0160208091040260200160405190810160405280929190818152602001828054610ea290611a8a565b8015610eef5780601f10610ec457610100808354040283529160200191610eef565b820191906000526020600020905b815481529060010190602001808311610ed257829003601f168201915b50505060038401546004850154600586015460069096015494956001600160801b0380841696600160801b90940481169550919350911688565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f735760405162461bcd60e51b815260040161059a90611ac4565b82516001600160a01b039081166000908152600160208181526040909220865181546001600160a01b031916941693909317835590850151859291820190610fbb9082611b3a565b5060408201516002820190610fd09082611b3a565b50606082015160808301516001600160801b03918216600160801b918316919091021760038381019190915560a0840151600484015560c0840151600584015560e090930151600690920180546001600160801b0319169282169290921790915584516001600160a01b03166000908152600160205260408120909201541690036110865782516001600160a01b0316600090815260016020819052604090912060030180546001600160801b03191690911790555b815160009081526002602081815260409283902085518155908501516001820180546001600160a01b0319166001600160a01b039092169190911790559184015190820155606083015183919060038201906110e29082611b3a565b50608082015160048201906110f79082611b3a565b5060a0820151600582015560c082015160068201906111169082611b3a565b5060e0820151600782019061112b9082611b3a565b506101009182015160089190910180546001600160801b0319166001600160801b03909216919091179055825160408085015160009081526003602090815290829020929092558451918501516060860151608087015160a088015160c089015160e08a0151978a0151955196977fe74483b98229ceaf67050395678c82eff7b6d0161a2499db0aeddcb9cc181896976111c59790611c39565b60405180910390a282600001516001600160a01b03167f073c39ab603de800ddba8d4e7faa74e448d1c4908a0d38e1ac1e4a2971eaf492846040015185602001518660e001518760a001518860c0015189606001518a608001516040516112329796959493929190611cbb565b60405180910390a250600192915050565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461128d5760405162461bcd60e51b815260040161059a90611ac4565b6001600160a01b0387166000908152600160205260409020600301546001600160801b031615611364576001600160a01b0387166000818152600160209081526040918290206006810180546001600160801b038c81166001600160801b03199092168217909255600483018b9055600583018a9055878216600160801b8102928a1692831760039094019390935584519081529283018a90528284018990526060830152608082015290517f11b9de0bab8e1f1ee99f6225000a751ec272fc7a1d6a55cf1b3739ab0c9bad569181900360a00190a25b5060019695505050505050565b6000805461137e90611a8a565b80601f01602080910402602001604051908101604052809291908181526020018280546113aa90611a8a565b80156113f75780601f106113cc576101008083540402835291602001916113f7565b820191906000526020600020905b8154815290600101906020018083116113da57829003601f168201915b505050505081565b60006020828403121561141157600080fd5b5035919050565b6000815180845260005b8181101561143e57602081850181015186830182015201611422565b506000602082860101526020601f19601f83011685010191505092915050565b8981526001600160a01b038916602082015260408101889052610120606082018190526000906114908382018a611418565b905082810360808401526114a48189611418565b90508660a084015282810360c08401526114be8187611418565b905082810360e08401526114d28186611418565b9150506001600160801b0383166101008301529a9950505050505050505050565b80356001600160801b038116811461150a57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156115495761154961150f565b60405290565b604051610100810167ffffffffffffffff811182821017156115495761154961150f565b600082601f83011261158457600080fd5b813567ffffffffffffffff8082111561159f5761159f61150f565b604051601f8301601f19908116603f011681019082821181831017156115c7576115c761150f565b816040528381528660208588010111156115e057600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561161657600080fd5b84359350611626602086016114f3565b9250604085013567ffffffffffffffff8082111561164357600080fd5b61164f88838901611573565b9350606087013591508082111561166557600080fd5b5061167287828801611573565b91505092959194509250565b6020815281516020820152600060208301516116a560408401826001600160a01b03169052565b506040830151606083015260608301516101208060808501526116cc610140850183611418565b91506080850151601f19808685030160a08701526116ea8483611418565b935060a087015160c087015260c08701519150808685030160e08701526117118483611418565b935060e087015191506101008187860301818801526117308584611418565b9450808801519250505061174e828601826001600160801b03169052565b5090949350505050565b80356001600160a01b038116811461150a57600080fd5b60006020828403121561178157600080fd5b61178a82611758565b9392505050565b6001600160a01b0389168152610100602082018190526000906117b68382018b611418565b905082810360408401526117ca818a611418565b9150506001600160801b03808816606084015280871660808401528560a08401528460c084015280841660e0840152509998505050505050505050565b6000610120828403121561181a57600080fd5b611822611525565b90508135815261183460208301611758565b602082015260408201356040820152606082013567ffffffffffffffff8082111561185e57600080fd5b61186a85838601611573565b6060840152608084013591508082111561188357600080fd5b61188f85838601611573565b608084015260a084013560a084015260c08401359150808211156118b257600080fd5b6118be85838601611573565b60c084015260e08401359150808211156118d757600080fd5b506118e484828501611573565b60e0830152506101006118f88184016114f3565b9082015292915050565b6000806040838503121561191557600080fd5b823567ffffffffffffffff8082111561192d57600080fd5b90840190610100828703121561194257600080fd5b61194a61154f565b61195383611758565b815260208301358281111561196757600080fd5b61197388828601611573565b60208301525060408301358281111561198b57600080fd5b61199788828601611573565b6040830152506119a9606084016114f3565b60608201526119ba608084016114f3565b608082015260a083013560a082015260c083013560c08201526119df60e084016114f3565b60e0820152935060208501359150808211156119fa57600080fd5b50611a0785828601611807565b9150509250929050565b60008060008060008060c08789031215611a2a57600080fd5b611a3387611758565b9550611a41602088016114f3565b94506040870135935060608701359250611a5d608088016114f3565b9150611a6b60a088016114f3565b90509295509295509295565b60208152600061178a6020830184611418565b600181811c90821680611a9e57607f821691505b602082108103611abe57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600d908201526c2737ba103a34329027bbb732b960991b604082015260600190565b601f821115611b3557600081815260208120601f850160051c81016020861015611b125750805b601f850160051c820191505b81811015611b3157828155600101611b1e565b5050505b505050565b815167ffffffffffffffff811115611b5457611b5461150f565b611b6881611b628454611a8a565b84611aeb565b602080601f831160018114611b9d5760008415611b855750858301515b600019600386901b1c1916600185901b178555611b31565b600085815260208120601f198616915b82811015611bcc57888601518255948401946001909101908401611bad565b5085821015611bea5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b606081526000611c0d6060830186611418565b8281036020840152611c1f8186611418565b9150506001600160801b0383166040830152949350505050565b6001600160a01b038816815260e060208201819052600090611c5d90830189611418565b8281036040840152611c6f8189611418565b90508660608401528281036080840152611c898187611418565b905082810360a0840152611c9d8186611418565b9150506001600160801b03831660c083015298975050505050505050565b60e081526000611cce60e083018a611418565b8281036020840152611ce0818a611418565b9150506001600160801b03808816604084015286606084015285608084015280851660a084015280841660c0840152509897505050505050505056fea2646970667358221220bd7034bd7a48d2f413526c6c915c6e22317aad573a6e199ead00b1a09dfeb7b264736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100a05760003560e01c8063784f901d11610064578063784f901d146101995780638da5cb5b146101f3578063a87430ba1461023f578063cc52d02614610273578063e42c217814610293578063ef690cc0146102b357600080fd5b80630b1e7f83146100ac57806333432ac7146100ea5780633ccfd60b1461011a57806343b04a0a146101315780636468a8491461015e57600080fd5b366100a757005b600080fd5b3480156100b857600080fd5b506100cc6100c73660046113ff565b6102d5565b6040516100e19998979695949392919061145e565b60405180910390f35b3480156100f657600080fd5b5061010a610105366004611600565b610550565b60405190151581526020016100e1565b34801561012657600080fd5b5061012f610658565b005b34801561013d57600080fd5b5061015161014c3660046113ff565b61075d565b6040516100e1919061167e565b34801561016a57600080fd5b5061018b6101793660046113ff565b60036020526000908152604090205481565b6040519081526020016100e1565b3480156101a557600080fd5b506101db6101b436600461176f565b6001600160a01b03166000908152600160205260409020600601546001600160801b031690565b6040516001600160801b0390911681526020016100e1565b3480156101ff57600080fd5b506102277f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100e1565b34801561024b57600080fd5b5061025f61025a36600461176f565b610dbb565b6040516100e1989796959493929190611791565b34801561027f57600080fd5b5061010a61028e366004611902565b610f29565b34801561029f57600080fd5b5061010a6102ae366004611a11565b611243565b3480156102bf57600080fd5b506102c8611371565b6040516100e19190611a77565b6002602081905260009182526040909120805460018201549282015460038301805492946001600160a01b031693919261030e90611a8a565b80601f016020809104026020016040519081016040528092919081815260200182805461033a90611a8a565b80156103875780601f1061035c57610100808354040283529160200191610387565b820191906000526020600020905b81548152906001019060200180831161036a57829003601f168201915b50505050509080600401805461039c90611a8a565b80601f01602080910402602001604051908101604052809291908181526020018280546103c890611a8a565b80156104155780601f106103ea57610100808354040283529160200191610415565b820191906000526020600020905b8154815290600101906020018083116103f857829003601f168201915b50505050509080600501549080600601805461043090611a8a565b80601f016020809104026020016040519081016040528092919081815260200182805461045c90611a8a565b80156104a95780601f1061047e576101008083540402835291602001916104a9565b820191906000526020600020905b81548152906001019060200180831161048c57829003601f168201915b5050505050908060070180546104be90611a8a565b80601f01602080910402602001604051908101604052809291908181526020018280546104ea90611a8a565b80156105375780601f1061050c57610100808354040283529160200191610537565b820191906000526020600020905b81548152906001019060200180831161051a57829003601f168201915b505050600890930154919250506001600160801b031689565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105a35760405162461bcd60e51b815260040161059a90611ac4565b60405180910390fd5b600085815260026020819052604090912001541561064d5760008581526002602052604090206008810180546001600160801b0319166001600160801b0387161790556006016105f38482611b3a565b50600085815260026020526040902060070161060f8382611b3a565b50847f8ddfcc44b666de67165289bff708991845dfef09de07e721a84f409114806a2184848760405161064493929190611bfa565b60405180910390a25b506001949350505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106a05760405162461bcd60e51b815260040161059a90611ac4565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03164760405160006040518083038185875af1925050503d806000811461070d576040519150601f19603f3d011682016040523d82523d6000602084013e610712565b606091505b505090508061075a5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b604482015260640161059a565b50565b6107be6040518061012001604052806000815260200160006001600160a01b0316815260200160008152602001606081526020016060815260200160008152602001606081526020016060815260200160006001600160801b031681525090565b60008281526003602052604090205415610a93576000828152600360208181526040808420548085526002808452948290208251610120810184528154815260018201546001600160a01b031694810194909452948501549183019190915291830180549293919260608401919061083590611a8a565b80601f016020809104026020016040519081016040528092919081815260200182805461086190611a8a565b80156108ae5780601f10610883576101008083540402835291602001916108ae565b820191906000526020600020905b81548152906001019060200180831161089157829003601f168201915b505050505081526020016004820180546108c790611a8a565b80601f01602080910402602001604051908101604052809291908181526020018280546108f390611a8a565b80156109405780601f1061091557610100808354040283529160200191610940565b820191906000526020600020905b81548152906001019060200180831161092357829003601f168201915b505050505081526020016005820154815260200160068201805461096390611a8a565b80601f016020809104026020016040519081016040528092919081815260200182805461098f90611a8a565b80156109dc5780601f106109b1576101008083540402835291602001916109dc565b820191906000526020600020905b8154815290600101906020018083116109bf57829003601f168201915b505050505081526020016007820180546109f590611a8a565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2190611a8a565b8015610a6e5780601f10610a4357610100808354040283529160200191610a6e565b820191906000526020600020905b815481529060010190602001808311610a5157829003601f168201915b5050509183525050600891909101546001600160801b03166020909101529392505050565b600080526002602090815260408051610120810182527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b805482527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077c546001600160a01b0316938201939093527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077d54918101919091527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077e8054919291606084019190610b5e90611a8a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8a90611a8a565b8015610bd75780601f10610bac57610100808354040283529160200191610bd7565b820191906000526020600020905b815481529060010190602001808311610bba57829003601f168201915b50505050508152602001600482018054610bf090611a8a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1c90611a8a565b8015610c695780601f10610c3e57610100808354040283529160200191610c69565b820191906000526020600020905b815481529060010190602001808311610c4c57829003601f168201915b5050505050815260200160058201548152602001600682018054610c8c90611a8a565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb890611a8a565b8015610d055780601f10610cda57610100808354040283529160200191610d05565b820191906000526020600020905b815481529060010190602001808311610ce857829003601f168201915b50505050508152602001600782018054610d1e90611a8a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4a90611a8a565b8015610d975780601f10610d6c57610100808354040283529160200191610d97565b820191906000526020600020905b815481529060010190602001808311610d7a57829003601f168201915b5050509183525050600891909101546001600160801b031660209091015292915050565b6001602081905260009182526040909120805491810180546001600160a01b0390931692610de890611a8a565b80601f0160208091040260200160405190810160405280929190818152602001828054610e1490611a8a565b8015610e615780601f10610e3657610100808354040283529160200191610e61565b820191906000526020600020905b815481529060010190602001808311610e4457829003601f168201915b505050505090806002018054610e7690611a8a565b80601f0160208091040260200160405190810160405280929190818152602001828054610ea290611a8a565b8015610eef5780601f10610ec457610100808354040283529160200191610eef565b820191906000526020600020905b815481529060010190602001808311610ed257829003601f168201915b50505060038401546004850154600586015460069096015494956001600160801b0380841696600160801b90940481169550919350911688565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f735760405162461bcd60e51b815260040161059a90611ac4565b82516001600160a01b039081166000908152600160208181526040909220865181546001600160a01b031916941693909317835590850151859291820190610fbb9082611b3a565b5060408201516002820190610fd09082611b3a565b50606082015160808301516001600160801b03918216600160801b918316919091021760038381019190915560a0840151600484015560c0840151600584015560e090930151600690920180546001600160801b0319169282169290921790915584516001600160a01b03166000908152600160205260408120909201541690036110865782516001600160a01b0316600090815260016020819052604090912060030180546001600160801b03191690911790555b815160009081526002602081815260409283902085518155908501516001820180546001600160a01b0319166001600160a01b039092169190911790559184015190820155606083015183919060038201906110e29082611b3a565b50608082015160048201906110f79082611b3a565b5060a0820151600582015560c082015160068201906111169082611b3a565b5060e0820151600782019061112b9082611b3a565b506101009182015160089190910180546001600160801b0319166001600160801b03909216919091179055825160408085015160009081526003602090815290829020929092558451918501516060860151608087015160a088015160c089015160e08a0151978a0151955196977fe74483b98229ceaf67050395678c82eff7b6d0161a2499db0aeddcb9cc181896976111c59790611c39565b60405180910390a282600001516001600160a01b03167f073c39ab603de800ddba8d4e7faa74e448d1c4908a0d38e1ac1e4a2971eaf492846040015185602001518660e001518760a001518860c0015189606001518a608001516040516112329796959493929190611cbb565b60405180910390a250600192915050565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461128d5760405162461bcd60e51b815260040161059a90611ac4565b6001600160a01b0387166000908152600160205260409020600301546001600160801b031615611364576001600160a01b0387166000818152600160209081526040918290206006810180546001600160801b038c81166001600160801b03199092168217909255600483018b9055600583018a9055878216600160801b8102928a1692831760039094019390935584519081529283018a90528284018990526060830152608082015290517f11b9de0bab8e1f1ee99f6225000a751ec272fc7a1d6a55cf1b3739ab0c9bad569181900360a00190a25b5060019695505050505050565b6000805461137e90611a8a565b80601f01602080910402602001604051908101604052809291908181526020018280546113aa90611a8a565b80156113f75780601f106113cc576101008083540402835291602001916113f7565b820191906000526020600020905b8154815290600101906020018083116113da57829003601f168201915b505050505081565b60006020828403121561141157600080fd5b5035919050565b6000815180845260005b8181101561143e57602081850181015186830182015201611422565b506000602082860101526020601f19601f83011685010191505092915050565b8981526001600160a01b038916602082015260408101889052610120606082018190526000906114908382018a611418565b905082810360808401526114a48189611418565b90508660a084015282810360c08401526114be8187611418565b905082810360e08401526114d28186611418565b9150506001600160801b0383166101008301529a9950505050505050505050565b80356001600160801b038116811461150a57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156115495761154961150f565b60405290565b604051610100810167ffffffffffffffff811182821017156115495761154961150f565b600082601f83011261158457600080fd5b813567ffffffffffffffff8082111561159f5761159f61150f565b604051601f8301601f19908116603f011681019082821181831017156115c7576115c761150f565b816040528381528660208588010111156115e057600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561161657600080fd5b84359350611626602086016114f3565b9250604085013567ffffffffffffffff8082111561164357600080fd5b61164f88838901611573565b9350606087013591508082111561166557600080fd5b5061167287828801611573565b91505092959194509250565b6020815281516020820152600060208301516116a560408401826001600160a01b03169052565b506040830151606083015260608301516101208060808501526116cc610140850183611418565b91506080850151601f19808685030160a08701526116ea8483611418565b935060a087015160c087015260c08701519150808685030160e08701526117118483611418565b935060e087015191506101008187860301818801526117308584611418565b9450808801519250505061174e828601826001600160801b03169052565b5090949350505050565b80356001600160a01b038116811461150a57600080fd5b60006020828403121561178157600080fd5b61178a82611758565b9392505050565b6001600160a01b0389168152610100602082018190526000906117b68382018b611418565b905082810360408401526117ca818a611418565b9150506001600160801b03808816606084015280871660808401528560a08401528460c084015280841660e0840152509998505050505050505050565b6000610120828403121561181a57600080fd5b611822611525565b90508135815261183460208301611758565b602082015260408201356040820152606082013567ffffffffffffffff8082111561185e57600080fd5b61186a85838601611573565b6060840152608084013591508082111561188357600080fd5b61188f85838601611573565b608084015260a084013560a084015260c08401359150808211156118b257600080fd5b6118be85838601611573565b60c084015260e08401359150808211156118d757600080fd5b506118e484828501611573565b60e0830152506101006118f88184016114f3565b9082015292915050565b6000806040838503121561191557600080fd5b823567ffffffffffffffff8082111561192d57600080fd5b90840190610100828703121561194257600080fd5b61194a61154f565b61195383611758565b815260208301358281111561196757600080fd5b61197388828601611573565b60208301525060408301358281111561198b57600080fd5b61199788828601611573565b6040830152506119a9606084016114f3565b60608201526119ba608084016114f3565b608082015260a083013560a082015260c083013560c08201526119df60e084016114f3565b60e0820152935060208501359150808211156119fa57600080fd5b50611a0785828601611807565b9150509250929050565b60008060008060008060c08789031215611a2a57600080fd5b611a3387611758565b9550611a41602088016114f3565b94506040870135935060608701359250611a5d608088016114f3565b9150611a6b60a088016114f3565b90509295509295509295565b60208152600061178a6020830184611418565b600181811c90821680611a9e57607f821691505b602082108103611abe57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600d908201526c2737ba103a34329027bbb732b960991b604082015260600190565b601f821115611b3557600081815260208120601f850160051c81016020861015611b125750805b601f850160051c820191505b81811015611b3157828155600101611b1e565b5050505b505050565b815167ffffffffffffffff811115611b5457611b5461150f565b611b6881611b628454611a8a565b84611aeb565b602080601f831160018114611b9d5760008415611b855750858301515b600019600386901b1c1916600185901b178555611b31565b600085815260208120601f198616915b82811015611bcc57888601518255948401946001909101908401611bad565b5085821015611bea5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b606081526000611c0d6060830186611418565b8281036020840152611c1f8186611418565b9150506001600160801b0383166040830152949350505050565b6001600160a01b038816815260e060208201819052600090611c5d90830189611418565b8281036040840152611c6f8189611418565b90508660608401528281036080840152611c898187611418565b905082810360a0840152611c9d8186611418565b9150506001600160801b03831660c083015298975050505050505050565b60e081526000611cce60e083018a611418565b8281036020840152611ce0818a611418565b9150506001600160801b03808816604084015286606084015285608084015280851660a084015280841660c0840152509897505050505050505056fea2646970667358221220bd7034bd7a48d2f413526c6c915c6e22317aad573a6e199ead00b1a09dfeb7b264736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "AddInfringement((address,string,string,uint128,uint128,uint256,uint256,uint128),(uint256,address,uint256,string,string,uint256,string,string,uint128))": {
        "notice": "Function that allows the owner to add new infringements"
      },
      "GetReportedPost(uint256)": {
        "notice": "Function to get post by hash"
      },
      "GetReputationScore(address)": {
        "notice": "Function to get reputation score of a user"
      },
      "UpdateCopyrightInfringementUser(address,uint128,uint256,uint256,uint128,uint128)": {
        "notice": "Function that allows the owner to update an infringement user"
      },
      "UpdatePost(uint256,uint128,string,string)": {
        "notice": "Function that allows the owner to update an infringement user"
      },
      "withdraw()": {
        "notice": "Function that allows the owner to withdraw all the Ether in the contract The function can only be called by the owner of the contract as defined by the isOwner modifier"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 42,
        "contract": "contracts/ReputationAgent.sol:ReputationAgent",
        "label": "greeting",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 49,
        "contract": "contracts/ReputationAgent.sol:ReputationAgent",
        "label": "users",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(ICopyrightInfringementUser)20_storage)"
      },
      {
        "astId": 54,
        "contract": "contracts/ReputationAgent.sol:ReputationAgent",
        "label": "posts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(IReportedPost)39_storage)"
      },
      {
        "astId": 58,
        "contract": "contracts/ReputationAgent.sol:ReputationAgent",
        "label": "contentHashPosts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(ICopyrightInfringementUser)20_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICopyrightInfringementUser)",
        "numberOfBytes": "32",
        "value": "t_struct(ICopyrightInfringementUser)20_storage"
      },
      "t_mapping(t_uint256,t_struct(IReportedPost)39_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IReportedPost)",
        "numberOfBytes": "32",
        "value": "t_struct(IReportedPost)39_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ICopyrightInfringementUser)20_storage": {
        "encoding": "inplace",
        "label": "struct ICopyrightInfringementUser",
        "members": [
          {
            "astId": 5,
            "contract": "contracts/ReputationAgent.sol:ReputationAgent",
            "label": "userId",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7,
            "contract": "contracts/ReputationAgent.sol:ReputationAgent",
            "label": "platform",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 9,
            "contract": "contracts/ReputationAgent.sol:ReputationAgent",
            "label": "username",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 11,
            "contract": "contracts/ReputationAgent.sol:ReputationAgent",
            "label": "postCount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 13,
            "contract": "contracts/ReputationAgent.sol:ReputationAgent",
            "label": "offenseCount",
            "offset": 16,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 15,
            "contract": "contracts/ReputationAgent.sol:ReputationAgent",
            "label": "firstOffenseTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 17,
            "contract": "contracts/ReputationAgent.sol:ReputationAgent",
            "label": "lastOffenseTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 19,
            "contract": "contracts/ReputationAgent.sol:ReputationAgent",
            "label": "reputationScore",
            "offset": 0,
            "slot": "6",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(IReportedPost)39_storage": {
        "encoding": "inplace",
        "label": "struct IReportedPost",
        "members": [
          {
            "astId": 22,
            "contract": "contracts/ReputationAgent.sol:ReputationAgent",
            "label": "recordId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 24,
            "contract": "contracts/ReputationAgent.sol:ReputationAgent",
            "label": "userId",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 26,
            "contract": "contracts/ReputationAgent.sol:ReputationAgent",
            "label": "contentHash",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 28,
            "contract": "contracts/ReputationAgent.sol:ReputationAgent",
            "label": "postText",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 30,
            "contract": "contracts/ReputationAgent.sol:ReputationAgent",
            "label": "postUrl",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 32,
            "contract": "contracts/ReputationAgent.sol:ReputationAgent",
            "label": "timestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 34,
            "contract": "contracts/ReputationAgent.sol:ReputationAgent",
            "label": "derivedContext",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 36,
            "contract": "contracts/ReputationAgent.sol:ReputationAgent",
            "label": "derivedContextExplanation",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 38,
            "contract": "contracts/ReputationAgent.sol:ReputationAgent",
            "label": "severityScore",
            "offset": 0,
            "slot": "8",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}